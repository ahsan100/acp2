{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/collections/Questionnaires.js","filenameRelative":"/collections/Questionnaires.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/collections/Questionnaires.js.map","sourceFileName":"/collections/Questionnaires.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"Questionnaires"},"ignored":false,"code":"Questionnaires = new Mongo.Collection('questionnaires');\n\nQuestionnaires.allow({\n  insert: function insert(userId, doc) {\n    return !!userId;\n  },\n  update: function update(userId, doc) {\n    return !!userId;\n  }\n});\n\nSingleCheckbox = new SimpleSchema({\n  option: {\n    type: String,\n    label: \"Option\",\n    optional: true\n  }\n});\n\nSingleQuestion = new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Question\"\n  },\n  instructions: {\n    type: String,\n    label: \"Instructions\",\n    optional: true\n  },\n  timeout: {\n    type: Number,\n    label: \"Expiration threshold\",\n    defaultValue: 0,\n    optional: true,\n    min: 0\n  },\n  type: {\n    type: String,\n    label: \"Question type\",\n    optional: true,\n    autoform: {\n      type: \"select\",\n      options: function options() {\n        return [{ label: \"Free Text\", value: \"Free Text\" }, { label: \"Multiple Choice\", value: \"Multiple Choice\" }, { label: \"Slider\", value: \"Slider\" }];\n      }\n    }\n  },\n  checkboxes: {\n    type: [SingleCheckbox],\n    optional: true\n  },\n  // Slider\n  minValue: {\n    type: Number,\n    label: \"Minimum value\",\n    optional: true,\n    defaultValue: 0\n  },\n  maxValue: {\n    type: Number,\n    label: \"Maximum value\",\n    optional: true,\n    defaultValue: 0\n  }\n});\n\nConfiguration = new SimpleSchema({\n  startDate: {\n    type: Date,\n    // autoform: {\n    //     type: \"bootstrap-datepicker\",\n    //     datePickerOptions: {\n    //         format: \"dd/mm/yyyy\",\n    //         autoclose: true\n    //     }\n    // },\n    label: \"Study start date\",\n    optional: true\n  },\n  endDate: {\n    type: Date,\n    label: \"Study end date\",\n    optional: true\n  }\n});\n\nSingleSensor = new SimpleSchema({\n  sensorType: {\n    type: String\n  },\n  sensorActive: {\n    type: Boolean,\n    label: \"Do you want to enable this option?\",\n    autoform: {\n      type: \"boolean-radios\",\n      trueLabel: \"Enabled\",\n      falseLabel: \"Disabled\",\n      value: false\n    }\n  },\n  frequency: {\n    type: Number,\n    label: \"Frequency (in microsends)\",\n    optional: true\n  }\n});\n\nQuestionnaireSchema = new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Name\"\n  },\n  description: {\n    type: String,\n    label: \"Description\"\n  },\n  questions: {\n    type: [SingleQuestion],\n    label: \"\",\n    optional: true\n  },\n  configuration: {\n    type: [Configuration],\n    optional: true\n  },\n  sensors: {\n    type: [SingleSensor],\n    optional: true\n  },\n  author: {\n    type: String,\n    label: \"Author\",\n    autoValue: function autoValue() {\n      return this.userId;\n    },\n    autoform: {\n      type: \"hidden\"\n    }\n  },\n  createdAt: {\n    type: Date,\n    label: \"Created at\",\n    autoValue: function autoValue() {\n      return new Date();\n    },\n    autoform: {\n      type: \"hidden\"\n    }\n  }\n});\n\nMeteor.methods({\n  deleteQuestionnaire: function deleteQuestionnaire(id) {\n    Questionnaires.remove(id);\n  }\n});\n\nQuestionnaires.attachSchema(QuestionnaireSchema);","ast":null,"map":{"version":3,"sources":["/collections/Questionnaires.js"],"names":[],"mappings":"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","file":"/collections/Questionnaires.js.map","sourcesContent":["Questionnaires = new Mongo.Collection('questionnaires');\n\nQuestionnaires.allow({\n  insert: function(userId, doc) {\n    return !!userId;\n  },\n  update: function(userId, doc) {\n    return !!userId;\n  }\n});\n\nSingleCheckbox = new SimpleSchema({\n  option: {\n    type: String,\n    label: \"Option\",\n    optional: true\n  }\n});\n\nSingleQuestion = new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Question\"\n  },\n  instructions: {\n    type: String,\n    label: \"Instructions\",\n    optional: true\n  },\n  timeout: {\n    type: Number,\n    label: \"Expiration threshold\",\n    defaultValue: 0,\n    optional: true,\n    min: 0\n  },\n  type: {\n    type: String,\n    label: \"Question type\",\n    optional: true,\n    autoform: {\n      type: \"select\",\n      options: function () {\n        return [\n          {label: \"Free Text\", value: \"Free Text\"},\n          {label: \"Multiple Choice\", value: \"Multiple Choice\"},\n          {label: \"Slider\", value: \"Slider\"}\n        ];\n      }\n    }\n  },\n  checkboxes: {\n    type: [SingleCheckbox],\n    optional: true\n  },\n  // Slider\n  minValue: {\n    type: Number,\n    label: \"Minimum value\",\n    optional: true,\n    defaultValue: 0\n  },\n  maxValue: {\n    type: Number,\n    label: \"Maximum value\",\n    optional: true,\n    defaultValue: 0\n  }\n});\n\nConfiguration = new SimpleSchema({\n  startDate: {\n    type: Date,\n    // autoform: {\n    //     type: \"bootstrap-datepicker\",\n    //     datePickerOptions: {\n    //         format: \"dd/mm/yyyy\",\n    //         autoclose: true\n    //     }\n    // },\n    label: \"Study start date\",\n    optional: true\n  },\n  endDate: {\n    type: Date,\n    label: \"Study end date\",\n    optional: true\n  }\n});\n\nSingleSensor = new SimpleSchema({\n  sensorType: {\n    type: String\n  },\n  sensorActive: {\n    type: Boolean,\n    label: \"Do you want to enable this option?\",\n    autoform:{\n        type: \"boolean-radios\",\n        trueLabel: \"Enabled\",\n        falseLabel: \"Disabled\",\n        value: false\n    }\n  },\n  frequency: {\n    type: Number,\n    label: \"Frequency (in microsends)\",\n    optional: true\n  }\n});\n\nQuestionnaireSchema = new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Name\"\n  },\n  description: {\n    type: String,\n    label: \"Description\"\n  },\n  questions: {\n    type: [SingleQuestion],\n    label: \"\",\n    optional: true\n  },\n  configuration: {\n    type: [Configuration],\n    optional: true\n  },\n  sensors: {\n     type: [SingleSensor],\n     optional: true\n  },\n  author: {\n    type: String,\n    label: \"Author\",\n    autoValue: function() {\n      return this.userId\n    },\n    autoform: {\n      type: \"hidden\"\n    }\n  },\n  createdAt: {\n    type: Date,\n    label: \"Created at\",\n    autoValue: function() {\n      return new Date()\n    },\n    autoform: {\n      type: \"hidden\"\n    }\n  }\n});\n\nMeteor.methods({\n  deleteQuestionnaire: function(id) {\n    Questionnaires.remove(id);\n  }\n});\n\nQuestionnaires.attachSchema(QuestionnaireSchema);\n"]},"hash":"4306b95ffd9731a65250bd875ddd8aa0e35a9844"}
