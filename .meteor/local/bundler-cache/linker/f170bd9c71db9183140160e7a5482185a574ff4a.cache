[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nBlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\nlodash = Package['erasaur:meteor-lodash'].lodash;\n_ = Package.underscore._;\nSpiderable = Package.spiderable.Spiderable;\nHelpers = Package['raix:handlebar-helpers'].Helpers;\nActiveRoute = Package['zimme:active-route'].ActiveRoute;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nmoment = Package['momentjs:moment'].moment;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"routes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// lib/routes.js                                                              //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nAccounts.onLogin(function () {                                                // 1\n  FlowRouter.go('questionnaire-overview');                                    // 2\n});                                                                           // 3\n                                                                              //\nAccounts.onLogout(function () {                                               // 5\n  FlowRouter.go('home');                                                      // 6\n});                                                                           // 7\n                                                                              //\n// Users that are not logged in should always be redictered to the home page.\nFlowRouter.triggers.enter([function (context, redirect) {                     // 10\n  if (!Meteor.userId()) {                                                     // 11\n    FlowRouter.go('home');                                                    // 12\n  }                                                                           // 13\n}]);                                                                          // 14\n                                                                              //\nFlowRouter.route('/', {                                                       // 16\n  name: 'home',                                                               // 17\n  action: function action() {                                                 // 18\n    // if(Meteor.userId()) {                                                  //\n    //   FlowRouter.go('questionnaire-overview');                             //\n    // }                                                                      //\n    GAnalytics.pageview();                                                    // 22\n    BlazeLayout.render('HomeLayout');                                         // 23\n  }                                                                           // 24\n});                                                                           // 16\n                                                                              //\nFlowRouter.route('/about', {                                                  // 27\n  name: 'about',                                                              // 28\n  action: function action() {                                                 // 29\n    GAnalytics.pageview();                                                    // 30\n    BlazeLayout.render('About', { main: 'About' });                           // 31\n  }                                                                           // 32\n});                                                                           // 27\n                                                                              //\nFlowRouter.route('/questionnaire-overview', {                                 // 35\n  name: 'questionnaire-overview',                                             // 36\n  action: function action() {                                                 // 37\n    GAnalytics.pageview();                                                    // 38\n    BlazeLayout.render('MainLayout', { main: 'Questionnaires' });             // 39\n  }                                                                           // 40\n});                                                                           // 35\n                                                                              //\nFlowRouter.route('/questionnaire/:id', {                                      // 43\n  name: 'questionnaire-single',                                               // 44\n  action: function action() {                                                 // 45\n    GAnalytics.pageview();                                                    // 46\n    BlazeLayout.render('MainLayout', { main: 'QuestionnaireSingle' });        // 47\n  }                                                                           // 48\n});                                                                           // 43\n                                                                              //\nFlowRouter.route('/questionnaire/:id/sensor', {                               // 51\n  name: 'questionnaire-single-sensor',                                        // 52\n  action: function action() {                                                 // 53\n    GAnalytics.pageview();                                                    // 54\n    BlazeLayout.render('MainLayout', { main: 'QuestionnaireSingleSensor' });  // 55\n  }                                                                           // 56\n});                                                                           // 51\n                                                                              //\nFlowRouter.route('/questionnaire/:id/configuration', {                        // 59\n  name: 'questionnaire-single-config',                                        // 60\n  action: function action() {                                                 // 61\n    GAnalytics.pageview();                                                    // 62\n    BlazeLayout.render('MainLayout', { main: 'QuestionnaireSingleConfig' });  // 63\n  }                                                                           // 64\n});                                                                           // 59\n                                                                              //\nFlowRouter.route('/questionnaire/:id/export', {                               // 67\n  name: 'questionnaire-single-export',                                        // 68\n  action: function action() {                                                 // 69\n    GAnalytics.pageview();                                                    // 70\n    BlazeLayout.render('MainLayout', { main: 'QuestionnaireSingleExport' });  // 71\n  }                                                                           // 72\n});                                                                           // 67\n////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"Questionnaires.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// collections/Questionnaires.js                                              //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nQuestionnaires = new Mongo.Collection('questionnaires');                      // 1\n                                                                              //\nQuestionnaires.allow({                                                        // 3\n  insert: function insert(userId, doc) {                                      // 4\n    return !!userId;                                                          // 5\n  },                                                                          // 6\n  update: function update(userId, doc) {                                      // 7\n    return !!userId;                                                          // 8\n  }                                                                           // 9\n});                                                                           // 3\n                                                                              //\nSingleCheckbox = new SimpleSchema({                                           // 12\n  option: {                                                                   // 13\n    type: String,                                                             // 14\n    label: \"Option\",                                                          // 15\n    optional: true                                                            // 16\n  }                                                                           // 13\n});                                                                           // 12\n                                                                              //\nSingleQuestion = new SimpleSchema({                                           // 20\n  name: {                                                                     // 21\n    type: String,                                                             // 22\n    label: \"Question\"                                                         // 23\n  },                                                                          // 21\n  instructions: {                                                             // 25\n    type: String,                                                             // 26\n    label: \"Instructions\",                                                    // 27\n    optional: true                                                            // 28\n  },                                                                          // 25\n  timeout: {                                                                  // 30\n    type: Number,                                                             // 31\n    label: \"Expiration threshold\",                                            // 32\n    defaultValue: 0,                                                          // 33\n    optional: true,                                                           // 34\n    min: 0                                                                    // 35\n  },                                                                          // 30\n  type: {                                                                     // 37\n    type: String,                                                             // 38\n    label: \"Question type\",                                                   // 39\n    optional: true,                                                           // 40\n    autoform: {                                                               // 41\n      type: \"select\",                                                         // 42\n      options: function options() {                                           // 43\n        return [{ label: \"Free Text\", value: \"Free Text\" }, { label: \"Multiple Choice\", value: \"Multiple Choice\" }, { label: \"Slider\", value: \"Slider\" }];\n      }                                                                       // 49\n    }                                                                         // 41\n  },                                                                          // 37\n  checkboxes: {                                                               // 52\n    type: [SingleCheckbox],                                                   // 53\n    optional: true                                                            // 54\n  },                                                                          // 52\n  // Slider                                                                   //\n  minValue: {                                                                 // 57\n    type: Number,                                                             // 58\n    label: \"Minimum value\",                                                   // 59\n    optional: true,                                                           // 60\n    defaultValue: 0                                                           // 61\n  },                                                                          // 57\n  maxValue: {                                                                 // 63\n    type: Number,                                                             // 64\n    label: \"Maximum value\",                                                   // 65\n    optional: true,                                                           // 66\n    defaultValue: 0                                                           // 67\n  }                                                                           // 63\n});                                                                           // 20\n                                                                              //\nConfiguration = new SimpleSchema({                                            // 71\n  startDate: {                                                                // 72\n    type: Date,                                                               // 73\n    // autoform: {                                                            //\n    //     type: \"bootstrap-datepicker\",                                      //\n    //     datePickerOptions: {                                               //\n    //         format: \"dd/mm/yyyy\",                                          //\n    //         autoclose: true                                                //\n    //     }                                                                  //\n    // },                                                                     //\n    label: \"Study start date\",                                                // 81\n    optional: true                                                            // 82\n  },                                                                          // 72\n  endDate: {                                                                  // 84\n    type: Date,                                                               // 85\n    label: \"Study end date\",                                                  // 86\n    optional: true                                                            // 87\n  }                                                                           // 84\n});                                                                           // 71\n                                                                              //\nSingleSensor = new SimpleSchema({                                             // 91\n  sensorType: {                                                               // 92\n    type: String                                                              // 93\n  },                                                                          // 92\n  sensorActive: {                                                             // 95\n    type: Boolean,                                                            // 96\n    label: \"Do you want to enable this option?\",                              // 97\n    autoform: {                                                               // 98\n      type: \"boolean-radios\",                                                 // 99\n      trueLabel: \"Enabled\",                                                   // 100\n      falseLabel: \"Disabled\",                                                 // 101\n      value: false                                                            // 102\n    }                                                                         // 98\n  },                                                                          // 95\n  frequency: {                                                                // 105\n    type: Number,                                                             // 106\n    label: \"Frequency (in microsends)\",                                       // 107\n    optional: true                                                            // 108\n  }                                                                           // 105\n});                                                                           // 91\n                                                                              //\nQuestionnaireSchema = new SimpleSchema({                                      // 112\n  name: {                                                                     // 113\n    type: String,                                                             // 114\n    label: \"Name\"                                                             // 115\n  },                                                                          // 113\n  description: {                                                              // 117\n    type: String,                                                             // 118\n    label: \"Description\"                                                      // 119\n  },                                                                          // 117\n  questions: {                                                                // 121\n    type: [SingleQuestion],                                                   // 122\n    label: \"\",                                                                // 123\n    optional: true                                                            // 124\n  },                                                                          // 121\n  configuration: {                                                            // 126\n    type: [Configuration],                                                    // 127\n    optional: true                                                            // 128\n  },                                                                          // 126\n  sensors: {                                                                  // 130\n    type: [SingleSensor],                                                     // 131\n    optional: true                                                            // 132\n  },                                                                          // 130\n  author: {                                                                   // 134\n    type: String,                                                             // 135\n    label: \"Author\",                                                          // 136\n    autoValue: function autoValue() {                                         // 137\n      return this.userId;                                                     // 138\n    },                                                                        // 139\n    autoform: {                                                               // 140\n      type: \"hidden\"                                                          // 141\n    }                                                                         // 140\n  },                                                                          // 134\n  createdAt: {                                                                // 144\n    type: Date,                                                               // 145\n    label: \"Created at\",                                                      // 146\n    autoValue: function autoValue() {                                         // 147\n      return new Date();                                                      // 148\n    },                                                                        // 149\n    autoform: {                                                               // 150\n      type: \"hidden\"                                                          // 151\n    }                                                                         // 150\n  }                                                                           // 144\n});                                                                           // 112\n                                                                              //\nMeteor.methods({                                                              // 156\n  deleteQuestionnaire: function deleteQuestionnaire(id) {                     // 157\n    Questionnaires.remove(id);                                                // 158\n  }                                                                           // 159\n});                                                                           // 156\n                                                                              //\nQuestionnaires.attachSchema(QuestionnaireSchema);                             // 162\n////////////////////////////////////////////////////////////////////////////////\n\n},\"Sensors.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// collections/Sensors.js                                                     //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nSensors = new Mongo.Collection('sensors');                                    // 1\n                                                                              //\nSensors.allow({                                                               // 3\n  insert: function insert(userId, doc) {                                      // 4\n    return !!userId;                                                          // 5\n  }                                                                           // 6\n});                                                                           // 3\n                                                                              //\nSensorSchema = new SimpleSchema({                                             // 9\n  type: {                                                                     // 10\n    type: String                                                              // 11\n  },                                                                          // 10\n  active: {                                                                   // 13\n    type: Boolean,                                                            // 14\n    defaultValue: false                                                       // 15\n  },                                                                          // 13\n  frequency: {                                                                // 17\n    type: Number,                                                             // 18\n    label: \"Frequency (in microsends)\"                                        // 19\n  }                                                                           // 17\n});                                                                           // 9\n                                                                              //\nSensors.attachSchema(SensorSchema);                                           // 23\n////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"init.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// server/init.js                                                             //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nMeteor.startup(function () {                                                  // 1\n  // Populate Sensors collection if empty                                     //\n  if (Sensors.find().count() === 0) {                                         // 3\n    Sensors.insert({                                                          // 4\n      type: 'CHANEL',                                                         // 5\n      active: false,                                                          // 6\n      frequency: '23'                                                         // 7\n    });                                                                       // 4\n                                                                              //\n    Sensors.insert({                                                          // 10\n      type: 'GUCCI',                                                          // 11\n      frequency: '36'                                                         // 12\n    });                                                                       // 10\n                                                                              //\n    Sensors.insert({                                                          // 15\n      type: 'COACH',                                                          // 16\n      frequency: '99'                                                         // 17\n    });                                                                       // 15\n  }                                                                           // 19\n});                                                                           // 20\n                                                                              //\n// AutoForm.addHooks(['updateQuestionnaireId'],                               //\n// {                                                                          //\n//   formToModifier: function(modifier) {                                     //\n//     if (modifier.$set.comments) {                                          //\n//       modifier.$set.comments = _.compact(modifier.$set.comments);          //\n//     }                                                                      //\n//     return modifier;                                                       //\n//   }                                                                        //\n// });                                                                        //\n// https://github.com/aldeed/meteor-autoform/issues/1049                      //\n////////////////////////////////////////////////////////////////////////////////\n\n},\"publish.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// server/publish.js                                                          //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nMeteor.publish('questionnaires', function () {                                // 1\n  return Questionnaires.find({ author: this.userId });                        // 2\n});                                                                           // 3\n                                                                              //\nMeteor.publish('sensors', function () {                                       // 5\n  return Sensors.find();                                                      // 6\n});                                                                           // 7\n                                                                              //\nMeteor.publish('singleQuestionnaire', function (id) {                         // 9\n  check(id, String);                                                          // 10\n  return Questionnaires.find({ _id: id });                                    // 11\n});                                                                           // 12\n////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":[\"meteor/meteor\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// main.js                                                                    //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});   // 1\n                                                                              //\nMeteor.startup(function () {                                                  // 3\n  // code to run on server at startup                                         //\n});                                                                           // 5\n////////////////////////////////////////////////////////////////////////////////\n\n}]},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./lib/routes.js\");\nrequire(\"./collections/Questionnaires.js\");\nrequire(\"./collections/Sensors.js\");\nrequire(\"./server/init.js\");\nrequire(\"./server/publish.js\");\nrequire(\"./main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/lib/routes.js","/collections/Questionnaires.js","/collections/Sensors.js","/server/init.js","/server/publish.js","/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["Accounts.onLogin(function() {\n  FlowRouter.go('questionnaire-overview');\n});\n\nAccounts.onLogout(function() {\n  FlowRouter.go('home');\n});\n\n// Users that are not logged in should always be redictered to the home page.\nFlowRouter.triggers.enter([function(context, redirect){\n  if(!Meteor.userId()) {\n    FlowRouter.go('home');\n  }\n}]);\n\nFlowRouter.route('/', {\n  name: 'home',\n  action() {\n    // if(Meteor.userId()) {\n    //   FlowRouter.go('questionnaire-overview');\n    // }\n    GAnalytics.pageview();\n    BlazeLayout.render('HomeLayout');\n  }\n});\n\nFlowRouter.route('/about', {\n  name: 'about',\n  action() {\n    GAnalytics.pageview();\n    BlazeLayout.render('About', {main: 'About'});\n  }\n});\n\nFlowRouter.route('/questionnaire-overview', {\n  name: 'questionnaire-overview',\n  action() {\n    GAnalytics.pageview();\n    BlazeLayout.render('MainLayout', {main: 'Questionnaires'});\n  }\n});\n\nFlowRouter.route('/questionnaire/:id', {\n  name: 'questionnaire-single',\n  action() {\n    GAnalytics.pageview();\n    BlazeLayout.render('MainLayout', {main: 'QuestionnaireSingle'});\n  }\n});\n\nFlowRouter.route('/questionnaire/:id/sensor', {\n  name: 'questionnaire-single-sensor',\n  action() {\n    GAnalytics.pageview();\n    BlazeLayout.render('MainLayout', {main: 'QuestionnaireSingleSensor'});\n  }\n});\n\nFlowRouter.route('/questionnaire/:id/configuration', {\n  name: 'questionnaire-single-config',\n  action() {\n    GAnalytics.pageview();\n    BlazeLayout.render('MainLayout', {main: 'QuestionnaireSingleConfig'});\n  }\n});\n\nFlowRouter.route('/questionnaire/:id/export', {\n  name: 'questionnaire-single-export',\n  action() {\n    GAnalytics.pageview();\n    BlazeLayout.render('MainLayout', {main: 'QuestionnaireSingleExport'});\n  }\n});\n","Questionnaires = new Mongo.Collection('questionnaires');\n\nQuestionnaires.allow({\n  insert: function(userId, doc) {\n    return !!userId;\n  },\n  update: function(userId, doc) {\n    return !!userId;\n  }\n});\n\nSingleCheckbox = new SimpleSchema({\n  option: {\n    type: String,\n    label: \"Option\",\n    optional: true\n  }\n});\n\nSingleQuestion = new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Question\"\n  },\n  instructions: {\n    type: String,\n    label: \"Instructions\",\n    optional: true\n  },\n  timeout: {\n    type: Number,\n    label: \"Expiration threshold\",\n    defaultValue: 0,\n    optional: true,\n    min: 0\n  },\n  type: {\n    type: String,\n    label: \"Question type\",\n    optional: true,\n    autoform: {\n      type: \"select\",\n      options: function () {\n        return [\n          {label: \"Free Text\", value: \"Free Text\"},\n          {label: \"Multiple Choice\", value: \"Multiple Choice\"},\n          {label: \"Slider\", value: \"Slider\"}\n        ];\n      }\n    }\n  },\n  checkboxes: {\n    type: [SingleCheckbox],\n    optional: true\n  },\n  // Slider\n  minValue: {\n    type: Number,\n    label: \"Minimum value\",\n    optional: true,\n    defaultValue: 0\n  },\n  maxValue: {\n    type: Number,\n    label: \"Maximum value\",\n    optional: true,\n    defaultValue: 0\n  }\n});\n\nConfiguration = new SimpleSchema({\n  startDate: {\n    type: Date,\n    // autoform: {\n    //     type: \"bootstrap-datepicker\",\n    //     datePickerOptions: {\n    //         format: \"dd/mm/yyyy\",\n    //         autoclose: true\n    //     }\n    // },\n    label: \"Study start date\",\n    optional: true\n  },\n  endDate: {\n    type: Date,\n    label: \"Study end date\",\n    optional: true\n  }\n});\n\nSingleSensor = new SimpleSchema({\n  sensorType: {\n    type: String\n  },\n  sensorActive: {\n    type: Boolean,\n    label: \"Do you want to enable this option?\",\n    autoform:{\n        type: \"boolean-radios\",\n        trueLabel: \"Enabled\",\n        falseLabel: \"Disabled\",\n        value: false\n    }\n  },\n  frequency: {\n    type: Number,\n    label: \"Frequency (in microsends)\",\n    optional: true\n  }\n});\n\nQuestionnaireSchema = new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Name\"\n  },\n  description: {\n    type: String,\n    label: \"Description\"\n  },\n  questions: {\n    type: [SingleQuestion],\n    label: \"\",\n    optional: true\n  },\n  configuration: {\n    type: [Configuration],\n    optional: true\n  },\n  sensors: {\n     type: [SingleSensor],\n     optional: true\n  },\n  author: {\n    type: String,\n    label: \"Author\",\n    autoValue: function() {\n      return this.userId\n    },\n    autoform: {\n      type: \"hidden\"\n    }\n  },\n  createdAt: {\n    type: Date,\n    label: \"Created at\",\n    autoValue: function() {\n      return new Date()\n    },\n    autoform: {\n      type: \"hidden\"\n    }\n  }\n});\n\nMeteor.methods({\n  deleteQuestionnaire: function(id) {\n    Questionnaires.remove(id);\n  }\n});\n\nQuestionnaires.attachSchema(QuestionnaireSchema);\n","Sensors = new Mongo.Collection('sensors');\n\nSensors.allow({\n  insert: function(userId, doc) {\n    return !!userId;\n  }\n});\n\nSensorSchema = new SimpleSchema({\n  type: {\n    type: String\n  },\n  active: {\n    type: Boolean,\n    defaultValue: false\n  },\n  frequency: {\n    type: Number,\n    label: \"Frequency (in microsends)\"\n  }\n});\n\nSensors.attachSchema(SensorSchema);\n","Meteor.startup(function() {\n  // Populate Sensors collection if empty\n  if (Sensors.find().count() === 0) {\n    Sensors.insert({\n      type: 'CHANEL',\n      active: false,\n      frequency: '23'\n    });\n\n    Sensors.insert({\n      type: 'GUCCI',\n      frequency: '36'\n    });\n\n    Sensors.insert({\n      type: 'COACH',\n      frequency: '99'\n    });\n  }\n});\n\n\n// AutoForm.addHooks(['updateQuestionnaireId'],\n// {\n//   formToModifier: function(modifier) {\n//     if (modifier.$set.comments) {\n//       modifier.$set.comments = _.compact(modifier.$set.comments);\n//     }\n//     return modifier;\n//   }\n// });\n// https://github.com/aldeed/meteor-autoform/issues/1049\n","Meteor.publish('questionnaires', function(){\n  return Questionnaires.find({author: this.userId});\n});\n\nMeteor.publish('sensors', function(){\n  return Sensors.find();\n});\n\nMeteor.publish('singleQuestionnaire', function(id){\n  check(id, String);\n  return Questionnaires.find({_id: id});\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]