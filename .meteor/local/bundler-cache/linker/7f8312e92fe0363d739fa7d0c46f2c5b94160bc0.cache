[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Mongo = Package.mongo.Mongo;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\n\n/* Package-scope variables */\nvar Collection2;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aldeed_collection2-core/lib/collection2.js                                                               //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Exported only for listening to events                                                                             // 1\nCollection2 = new EventEmitter();                                                                                    // 2\n                                                                                                                     // 3\n// backwards compatibility                                                                                           // 4\nif (typeof Mongo === \"undefined\") {                                                                                  // 5\n  Mongo = {};                                                                                                        // 6\n  Mongo.Collection = Meteor.Collection;                                                                              // 7\n}                                                                                                                    // 8\n                                                                                                                     // 9\nvar addValidationErrorsPropName = SimpleSchema.version >= 2 ? 'addValidationErrors' : 'addInvalidKeys';              // 10\n                                                                                                                     // 11\n/**                                                                                                                  // 12\n * Mongo.Collection.prototype.attachSchema                                                                           // 13\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object                             // 14\n *    from which to create a new SimpleSchema instance                                                               // 15\n * @param {Object} [options]                                                                                         // 16\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed                          // 17\n *    through the collection's transform to properly validate.                                                       // 18\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining        // 19\n * @return {undefined}                                                                                               // 20\n *                                                                                                                   // 21\n * Use this method to attach a schema to a collection created by another package,                                    // 22\n * such as Meteor.users. It is most likely unsafe to call this method more than                                      // 23\n * once for a single collection, or to call this for a collection that had a                                         // 24\n * schema object passed to its constructor.                                                                          // 25\n */                                                                                                                  // 26\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {                                     // 27\n  var self = this;                                                                                                   // 28\n  options = options || {};                                                                                           // 29\n                                                                                                                     // 30\n  // Allow passing just the schema object                                                                            // 31\n  if (!(ss instanceof SimpleSchema)) {                                                                               // 32\n    ss = new SimpleSchema(ss);                                                                                       // 33\n  }                                                                                                                  // 34\n                                                                                                                     // 35\n  self._c2 = self._c2 || {};                                                                                         // 36\n                                                                                                                     // 37\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`        // 38\n  if (self._c2._simpleSchema && options.replace !== true) {                                                          // 39\n    if (ss.version >= 2) {                                                                                           // 40\n      var newSS = new SimpleSchema(self._c2._simpleSchema);                                                          // 41\n      newSS.extend(ss);                                                                                              // 42\n      ss = newSS;                                                                                                    // 43\n    } else {                                                                                                         // 44\n      ss = new SimpleSchema([self._c2._simpleSchema, ss]);                                                           // 45\n    }                                                                                                                // 46\n  }                                                                                                                  // 47\n                                                                                                                     // 48\n  var selector = options.selector;                                                                                   // 49\n                                                                                                                     // 50\n  function attachTo(obj) {                                                                                           // 51\n    if (typeof selector === \"object\") {                                                                              // 52\n      // Index of existing schema with identical selector                                                            // 53\n      var schemaIndex = -1;                                                                                          // 54\n                                                                                                                     // 55\n      // we need an array to hold multiple schemas                                                                   // 56\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || [];                                                         // 57\n                                                                                                                     // 58\n      // Loop through existing schemas with selectors                                                                // 59\n      obj._c2._simpleSchemas.forEach(function (schema, index) {                                                      // 60\n        // if we find a schema with an identical selector, save it's index                                           // 61\n        if(_.isEqual(schema.selector, selector)) {                                                                   // 62\n          schemaIndex = index;                                                                                       // 63\n        }                                                                                                            // 64\n      });                                                                                                            // 65\n      if (schemaIndex === -1) {                                                                                      // 66\n        // We didn't find the schema in our array - push it into the array                                           // 67\n        obj._c2._simpleSchemas.push({                                                                                // 68\n          schema: new SimpleSchema(ss),                                                                              // 69\n          selector: selector,                                                                                        // 70\n        });                                                                                                          // 71\n      } else {                                                                                                       // 72\n        // We found a schema with an identical selector in our array,                                                // 73\n        if (options.replace !== true) {                                                                              // 74\n          // Merge with existing schema unless options.replace is `true`                                             // 75\n          if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {                                             // 76\n            obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);                                                   // 77\n          } else {                                                                                                   // 78\n            obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n          }                                                                                                          // 80\n        } else {                                                                                                     // 81\n          // If options.repalce is `true` replace existing schema with new schema                                    // 82\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;                                                           // 83\n        }                                                                                                            // 84\n                                                                                                                     // 85\n      }                                                                                                              // 86\n                                                                                                                     // 87\n      // Remove existing schemas without selector                                                                    // 88\n      delete obj._c2._simpleSchema;                                                                                  // 89\n    } else {                                                                                                         // 90\n      // Track the schema in the collection                                                                          // 91\n      obj._c2._simpleSchema = ss;                                                                                    // 92\n                                                                                                                     // 93\n      // Remove existing schemas with selector                                                                       // 94\n      delete obj._c2._simpleSchemas;                                                                                 // 95\n    }                                                                                                                // 96\n  }                                                                                                                  // 97\n                                                                                                                     // 98\n  attachTo(self);                                                                                                    // 99\n  // Attach the schema to the underlying LocalCollection, too                                                        // 100\n  if (self._collection instanceof LocalCollection) {                                                                 // 101\n    self._collection._c2 = self._collection._c2 || {};                                                               // 102\n    attachTo(self._collection);                                                                                      // 103\n  }                                                                                                                  // 104\n                                                                                                                     // 105\n  defineDeny(self, options);                                                                                         // 106\n  keepInsecure(self);                                                                                                // 107\n                                                                                                                     // 108\n  Collection2.emit('schema.attached', self, ss, options);                                                            // 109\n};                                                                                                                   // 110\n                                                                                                                     // 111\n_.each([Mongo.Collection, LocalCollection], function (obj) {                                                         // 112\n  /**                                                                                                                // 113\n   * simpleSchema                                                                                                    // 114\n   * @description function detect the correct schema by given params. If it                                          // 115\n   * detect multi-schema presence in `self`, then it made an attempt to find a                                       // 116\n   * `selector` in args                                                                                              // 117\n   * @param {Object} doc - It could be <update> on update/upsert or document                                         // 118\n   * itself on insert/remove                                                                                         // 119\n   * @param {Object} [options] - It could be <update> on update/upsert etc                                           // 120\n   * @param {Object} [query] - it could be <query> on update/upsert                                                  // 121\n   * @return {Object} Schema                                                                                         // 122\n   */                                                                                                                // 123\n  obj.prototype.simpleSchema = function (doc, options, query) {                                                      // 124\n    if (!this._c2) return null;                                                                                      // 125\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;                                                       // 126\n                                                                                                                     // 127\n    var schemas = this._c2._simpleSchemas;                                                                           // 128\n    if (schemas && schemas.length > 0) {                                                                             // 129\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');  // 130\n                                                                                                                     // 131\n      var schema, selector, target;                                                                                  // 132\n      for (var i = 0; i < schemas.length; i++) {                                                                     // 133\n        schema = schemas[i];                                                                                         // 134\n        selector = Object.keys(schema.selector)[0];                                                                  // 135\n                                                                                                                     // 136\n        // We will set this to undefined because in theory you might want to select                                  // 137\n        // on a null value.                                                                                          // 138\n        target = undefined;                                                                                          // 139\n                                                                                                                     // 140\n        // here we are looking for selector in different places                                                      // 141\n        // $set should have more priority here                                                                       // 142\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {                                                 // 143\n          target = doc.$set[selector];                                                                               // 144\n        } else if (typeof doc[selector] !== 'undefined') {                                                           // 145\n          target = doc[selector];                                                                                    // 146\n        } else if (options && options.selector) {                                                                    // 147\n          target = options.selector[selector];                                                                       // 148\n        } else if (query && query[selector]) { // on upsert/update operations                                        // 149\n          target = query[selector];                                                                                  // 150\n        }                                                                                                            // 151\n                                                                                                                     // 152\n        // we need to compare given selector with doc property or option to                                          // 153\n        // find right schema                                                                                         // 154\n        if (target !== undefined && target === schema.selector[selector]) {                                          // 155\n          return schema.schema;                                                                                      // 156\n        }                                                                                                            // 157\n      }                                                                                                              // 158\n    }                                                                                                                // 159\n                                                                                                                     // 160\n    return null;                                                                                                     // 161\n  };                                                                                                                 // 162\n});                                                                                                                  // 163\n                                                                                                                     // 164\n// Wrap DB write operation methods                                                                                   // 165\n_.each(['insert', 'update'], function(methodName) {                                                                  // 166\n  var _super = Mongo.Collection.prototype[methodName];                                                               // 167\n  Mongo.Collection.prototype[methodName] = function() {                                                              // 168\n    var self = this, options,                                                                                        // 169\n        args = _.toArray(arguments);                                                                                 // 170\n                                                                                                                     // 171\n    options = (methodName === \"insert\") ? args[1] : args[2];                                                         // 172\n                                                                                                                     // 173\n    // Support missing options arg                                                                                   // 174\n    if (!options || typeof options === \"function\") {                                                                 // 175\n      options = {};                                                                                                  // 176\n    }                                                                                                                // 177\n                                                                                                                     // 178\n    if (self._c2 && options.bypassCollection2 !== true) {                                                            // 179\n      var userId = null;                                                                                             // 180\n      try { // https://github.com/aldeed/meteor-collection2/issues/175                                               // 181\n        userId = Meteor.userId();                                                                                    // 182\n      } catch (err) {}                                                                                               // 183\n                                                                                                                     // 184\n      args = doValidate.call(                                                                                        // 185\n        self,                                                                                                        // 186\n        methodName,                                                                                                  // 187\n        args,                                                                                                        // 188\n        true, // getAutoValues                                                                                       // 189\n        userId,                                                                                                      // 190\n        Meteor.isServer // isFromTrustedCode                                                                         // 191\n      );                                                                                                             // 192\n      if (!args) {                                                                                                   // 193\n        // doValidate already called the callback or threw the error so we're done.                                  // 194\n        // But insert should always return an ID to match core behavior.                                             // 195\n        return methodName === \"insert\" ? self._makeNewID() : undefined;                                              // 196\n      }                                                                                                              // 197\n    } else {                                                                                                         // 198\n      // We still need to adjust args because insert does not take options                                           // 199\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);                               // 200\n    }                                                                                                                // 201\n                                                                                                                     // 202\n    return _super.apply(self, args);                                                                                 // 203\n  };                                                                                                                 // 204\n});                                                                                                                  // 205\n                                                                                                                     // 206\n/*                                                                                                                   // 207\n * Private                                                                                                           // 208\n */                                                                                                                  // 209\n                                                                                                                     // 210\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {                                          // 211\n  var self = this, doc, callback, error, options, isUpsert, selector, last, hasCallback;                             // 212\n                                                                                                                     // 213\n  if (!args.length) {                                                                                                // 214\n    throw new Error(type + \" requires an argument\");                                                                 // 215\n  }                                                                                                                  // 216\n                                                                                                                     // 217\n  // Gather arguments and cache the selector                                                                         // 218\n  if (type === \"insert\") {                                                                                           // 219\n    doc = args[0];                                                                                                   // 220\n    options = args[1];                                                                                               // 221\n    callback = args[2];                                                                                              // 222\n                                                                                                                     // 223\n    // The real insert doesn't take options                                                                          // 224\n    if (typeof options === \"function\") {                                                                             // 225\n      args = [doc, options];                                                                                         // 226\n    } else if (typeof callback === \"function\") {                                                                     // 227\n      args = [doc, callback];                                                                                        // 228\n    } else {                                                                                                         // 229\n      args = [doc];                                                                                                  // 230\n    }                                                                                                                // 231\n  } else if (type === \"update\") {                                                                                    // 232\n    selector = args[0];                                                                                              // 233\n    doc = args[1];                                                                                                   // 234\n    options = args[2];                                                                                               // 235\n    callback = args[3];                                                                                              // 236\n  } else {                                                                                                           // 237\n    throw new Error(\"invalid type argument\");                                                                        // 238\n  }                                                                                                                  // 239\n                                                                                                                     // 240\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc);                                                             // 241\n                                                                                                                     // 242\n  // Support missing options arg                                                                                     // 243\n  if (!callback && typeof options === \"function\") {                                                                  // 244\n    callback = options;                                                                                              // 245\n    options = {};                                                                                                    // 246\n  }                                                                                                                  // 247\n  options = options || {};                                                                                           // 248\n                                                                                                                     // 249\n  last = args.length - 1;                                                                                            // 250\n                                                                                                                     // 251\n  hasCallback = (typeof args[last] === 'function');                                                                  // 252\n                                                                                                                     // 253\n  // If update was called with upsert:true, flag as an upsert                                                        // 254\n  isUpsert = (type === \"update\" && options.upsert === true);                                                         // 255\n                                                                                                                     // 256\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why                                        // 257\n  // schema declaration moved here                                                                                   // 258\n  var schema = self.simpleSchema(doc, options, selector);                                                            // 259\n  var isLocalCollection = (self._connection === null);                                                               // 260\n                                                                                                                     // 261\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {                                   // 263\n    getAutoValues = false;                                                                                           // 264\n  }                                                                                                                  // 265\n                                                                                                                     // 266\n  // Determine validation context                                                                                    // 267\n  var validationContext = options.validationContext;                                                                 // 268\n  if (validationContext) {                                                                                           // 269\n    if (typeof validationContext === 'string') {                                                                     // 270\n      validationContext = schema.namedContext(validationContext);                                                    // 271\n    }                                                                                                                // 272\n  } else {                                                                                                           // 273\n    validationContext = schema.namedContext();                                                                       // 274\n  }                                                                                                                  // 275\n                                                                                                                     // 276\n  // Add a default callback function if we're on the client and no callback was given                                // 277\n  if (Meteor.isClient && !callback) {                                                                                // 278\n    // Client can't block, so it can't report errors by exception,                                                   // 279\n    // only by callback. If they forget the callback, give them a                                                    // 280\n    // default one that logs the error, so they aren't totally                                                       // 281\n    // baffled if their writes don't work because their database is                                                  // 282\n    // down.                                                                                                         // 283\n    callback = function(err) {                                                                                       // 284\n      if (err) {                                                                                                     // 285\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));                                               // 286\n      }                                                                                                              // 287\n    };                                                                                                               // 288\n  }                                                                                                                  // 289\n                                                                                                                     // 290\n  // If client validation is fine or is skipped but then something                                                   // 291\n  // is found to be invalid on the server, we get that error back                                                    // 292\n  // as a special Meteor.Error that we need to parse.                                                                // 293\n  if (Meteor.isClient && hasCallback) {                                                                              // 294\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);                         // 295\n  }                                                                                                                  // 296\n                                                                                                                     // 297\n  var schemaAllowsId = schema.allowsKey(\"_id\");                                                                      // 298\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {                                                             // 299\n    doc._id = self._makeNewID();                                                                                     // 300\n  }                                                                                                                  // 301\n                                                                                                                     // 302\n  // Get the docId for passing in the autoValue/custom context                                                       // 303\n  var docId;                                                                                                         // 304\n  if (type === 'insert') {                                                                                           // 305\n    docId = doc._id; // might be undefined                                                                           // 306\n  } else if (type === \"update\" && selector) {                                                                        // 307\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;            // 308\n  }                                                                                                                  // 309\n                                                                                                                     // 310\n  // If _id has already been added, remove it temporarily if it's                                                    // 311\n  // not explicitly defined in the schema.                                                                           // 312\n  var cachedId;                                                                                                      // 313\n  if (doc._id && !schemaAllowsId) {                                                                                  // 314\n    cachedId = doc._id;                                                                                              // 315\n    delete doc._id;                                                                                                  // 316\n  }                                                                                                                  // 317\n                                                                                                                     // 318\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {                // 319\n    // Clean the doc/modifier in place                                                                               // 320\n    schema.clean(docToClean, {                                                                                       // 321\n      mutate: true,                                                                                                  // 322\n      filter: filter,                                                                                                // 323\n      autoConvert: autoConvert,                                                                                      // 324\n      getAutoValues: getAutoValues,                                                                                  // 325\n      isModifier: (type !== \"insert\"),                                                                               // 326\n      removeEmptyStrings: removeEmptyStrings,                                                                        // 327\n      trimStrings: trimStrings,                                                                                      // 328\n      extendAutoValueContext: _.extend({                                                                             // 329\n        isInsert: (type === \"insert\"),                                                                               // 330\n        isUpdate: (type === \"update\" && options.upsert !== true),                                                    // 331\n        isUpsert: isUpsert,                                                                                          // 332\n        userId: userId,                                                                                              // 333\n        isFromTrustedCode: isFromTrustedCode,                                                                        // 334\n        docId: docId,                                                                                                // 335\n        isLocalCollection: isLocalCollection                                                                         // 336\n      }, options.extendAutoValueContext || {})                                                                       // 337\n    });                                                                                                              // 338\n  }                                                                                                                  // 339\n                                                                                                                     // 340\n  // Preliminary cleaning on both client and server. On the server and for local                                     // 341\n  // collections, automatic values will also be set at this point.                                                   // 342\n  doClean(                                                                                                           // 343\n    doc,                                                                                                             // 344\n    getAutoValues,                                                                                                   // 345\n    options.filter !== false,                                                                                        // 346\n    options.autoConvert !== false,                                                                                   // 347\n    options.removeEmptyStrings !== false,                                                                            // 348\n    options.trimStrings !== false                                                                                    // 349\n  );                                                                                                                 // 350\n                                                                                                                     // 351\n  // We clone before validating because in some cases we need to adjust the                                          // 352\n  // object a bit before validating it. If we adjusted `doc` itself, our                                             // 353\n  // changes would persist into the database.                                                                        // 354\n  var docToValidate = {};                                                                                            // 355\n  for (var prop in doc) {                                                                                            // 356\n    // We omit prototype properties when cloning because they will not be valid                                      // 357\n    // and mongo omits them when saving to the database anyway.                                                      // 358\n    if (doc.hasOwnProperty(prop)) {                                                                                  // 359\n      docToValidate[prop] = doc[prop];                                                                               // 360\n    }                                                                                                                // 361\n  }                                                                                                                  // 362\n                                                                                                                     // 363\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty                                        // 364\n  // well by default, but it will not know about the fields in the selector,                                         // 365\n  // which are also stored in the database if an insert is performed. So we                                          // 366\n  // will allow these fields to be considered for validation by adding them                                          // 367\n  // to the $set in the modifier. This is no doubt prone to errors, but there                                        // 368\n  // probably isn't any better way right now.                                                                        // 369\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {                                                         // 370\n    var set = docToValidate.$set || {};                                                                              // 371\n    docToValidate.$set = _.clone(selector);                                                                          // 372\n    if (!schemaAllowsId) delete docToValidate.$set._id;                                                              // 373\n    _.extend(docToValidate.$set, set);                                                                               // 374\n  }                                                                                                                  // 375\n                                                                                                                     // 376\n  // Set automatic values for validation on the client.                                                              // 377\n  // On the server, we already updated doc with auto values, but on the client,                                      // 378\n  // we will add them to docToValidate for validation purposes only.                                                 // 379\n  // This is because we want all actual values generated on the server.                                              // 380\n  if (Meteor.isClient && !isLocalCollection) {                                                                       // 381\n    doClean(docToValidate, true, false, false, false, false);                                                        // 382\n  }                                                                                                                  // 383\n                                                                                                                     // 384\n  // XXX Maybe move this into SimpleSchema                                                                           // 385\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {                                               // 386\n    throw new Error('After filtering out keys not in the schema, your ' +                                            // 387\n      (type === 'update' ? 'modifier' : 'object') +                                                                  // 388\n      ' is now empty');                                                                                              // 389\n  }                                                                                                                  // 390\n                                                                                                                     // 391\n  // Validate doc                                                                                                    // 392\n  var isValid;                                                                                                       // 393\n  if (options.validate === false) {                                                                                  // 394\n    isValid = true;                                                                                                  // 395\n  } else {                                                                                                           // 396\n    isValid = validationContext.validate(docToValidate, {                                                            // 397\n      modifier: (type === \"update\" || type === \"upsert\"),                                                            // 398\n      upsert: isUpsert,                                                                                              // 399\n      extendedCustomContext: _.extend({                                                                              // 400\n        isInsert: (type === \"insert\"),                                                                               // 401\n        isUpdate: (type === \"update\" && options.upsert !== true),                                                    // 402\n        isUpsert: isUpsert,                                                                                          // 403\n        userId: userId,                                                                                              // 404\n        isFromTrustedCode: isFromTrustedCode,                                                                        // 405\n        docId: docId,                                                                                                // 406\n        isLocalCollection: isLocalCollection                                                                         // 407\n      }, options.extendedCustomContext || {})                                                                        // 408\n    });                                                                                                              // 409\n  }                                                                                                                  // 410\n                                                                                                                     // 411\n  if (isValid) {                                                                                                     // 412\n    // Add the ID back                                                                                               // 413\n    if (cachedId) {                                                                                                  // 414\n      doc._id = cachedId;                                                                                            // 415\n    }                                                                                                                // 416\n                                                                                                                     // 417\n    // Update the args to reflect the cleaned doc                                                                    // 418\n    // XXX not sure this is necessary since we mutate                                                                // 419\n    if (type === \"insert\") {                                                                                         // 420\n      args[0] = doc;                                                                                                 // 421\n    } else {                                                                                                         // 422\n      args[1] = doc;                                                                                                 // 423\n    }                                                                                                                // 424\n                                                                                                                     // 425\n    // If callback, set invalidKey when we get a mongo unique error                                                  // 426\n    if (Meteor.isServer && hasCallback) {                                                                            // 427\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);                       // 428\n    }                                                                                                                // 429\n                                                                                                                     // 430\n    return args;                                                                                                     // 431\n  } else {                                                                                                           // 432\n    error = getErrorObject(validationContext);                                                                       // 433\n    if (callback) {                                                                                                  // 434\n      // insert/update/upsert pass `false` when there's an error, so we do that                                      // 435\n      callback(error, false);                                                                                        // 436\n    } else {                                                                                                         // 437\n      throw error;                                                                                                   // 438\n    }                                                                                                                // 439\n  }                                                                                                                  // 440\n}                                                                                                                    // 441\n                                                                                                                     // 442\nfunction getErrorObject(context) {                                                                                   // 443\n  var message;                                                                                                       // 444\n  var invalidKeys = SimpleSchema.version >= 2 ? context.validationErrors() : context.invalidKeys();                  // 445\n  if (invalidKeys.length) {                                                                                          // 446\n    message = context.keyErrorMessage(invalidKeys[0].name);                                                          // 447\n  } else {                                                                                                           // 448\n    message = \"Failed validation\";                                                                                   // 449\n  }                                                                                                                  // 450\n  var error = new Error(message);                                                                                    // 451\n  error.invalidKeys = invalidKeys;                                                                                   // 452\n  error.validationContext = context;                                                                                 // 453\n  // If on the server, we add a sanitized error, too, in case we're                                                  // 454\n  // called from a method.                                                                                           // 455\n  if (Meteor.isServer) {                                                                                             // 456\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));                       // 457\n  }                                                                                                                  // 458\n  return error;                                                                                                      // 459\n}                                                                                                                    // 460\n                                                                                                                     // 461\nfunction addUniqueError(context, errorMessage) {                                                                     // 462\n  var name = errorMessage.split('c2_')[1].split(' ')[0];                                                             // 463\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];                                                         // 464\n                                                                                                                     // 465\n  context[addValidationErrorsPropName]([{                                                                            // 466\n    name: name,                                                                                                      // 467\n    type: 'notUnique',                                                                                               // 468\n    value: val                                                                                                       // 469\n  }]);                                                                                                               // 470\n}                                                                                                                    // 471\n                                                                                                                     // 472\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {                                        // 473\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {                                            // 474\n    var args = _.toArray(arguments);                                                                                 // 475\n    if (error &&                                                                                                     // 476\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {                                                                       // 478\n      addUniqueError(validationContext, error.message);                                                              // 479\n      args[0] = getErrorObject(validationContext);                                                                   // 480\n    }                                                                                                                // 481\n    return cb.apply(this, args);                                                                                     // 482\n  };                                                                                                                 // 483\n}                                                                                                                    // 484\n                                                                                                                     // 485\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {                                                 // 486\n  return function wrappedCallbackForParsingServerErrors(error) {                                                     // 487\n    var args = _.toArray(arguments);                                                                                 // 488\n    // Handle our own validation errors                                                                              // 489\n    if (error instanceof Meteor.Error &&                                                                             // 490\n        error.error === 400 &&                                                                                       // 491\n        error.reason === \"INVALID\" &&                                                                                // 492\n        typeof error.details === \"string\") {                                                                         // 493\n      var invalidKeysFromServer = EJSON.parse(error.details);                                                        // 494\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);                                         // 495\n      args[0] = getErrorObject(validationContext);                                                                   // 496\n    }                                                                                                                // 497\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors                             // 498\n    else if (error instanceof Meteor.Error &&                                                                        // 499\n             error.error === 409 &&                                                                                  // 500\n             error.reason &&                                                                                         // 501\n             error.reason.indexOf('E11000') !== -1 &&                                                                // 502\n             error.reason.indexOf('c2_') !== -1) {                                                                   // 503\n      addUniqueError(validationContext, error.reason);                                                               // 504\n      args[0] = getErrorObject(validationContext);                                                                   // 505\n    }                                                                                                                // 506\n    return cb.apply(this, args);                                                                                     // 507\n  };                                                                                                                 // 508\n}                                                                                                                    // 509\n                                                                                                                     // 510\nvar alreadyInsecured = {};                                                                                           // 511\nfunction keepInsecure(c) {                                                                                           // 512\n  // If insecure package is in use, we need to add allow rules that return                                           // 513\n  // true. Otherwise, it would seemingly turn off insecure mode.                                                     // 514\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {                                                   // 515\n    c.allow({                                                                                                        // 516\n      insert: function() {                                                                                           // 517\n        return true;                                                                                                 // 518\n      },                                                                                                             // 519\n      update: function() {                                                                                           // 520\n        return true;                                                                                                 // 521\n      },                                                                                                             // 522\n      remove: function () {                                                                                          // 523\n        return true;                                                                                                 // 524\n      },                                                                                                             // 525\n      fetch: [],                                                                                                     // 526\n      transform: null                                                                                                // 527\n    });                                                                                                              // 528\n    alreadyInsecured[c._name] = true;                                                                                // 529\n  }                                                                                                                  // 530\n  // If insecure package is NOT in use, then adding the two deny functions                                           // 531\n  // does not have any effect on the main app's security paradigm. The                                               // 532\n  // user will still be required to add at least one allow function of her                                           // 533\n  // own for each operation for this collection. And the user may still add                                          // 534\n  // additional deny functions, but does not have to.                                                                // 535\n}                                                                                                                    // 536\n                                                                                                                     // 537\nvar alreadyDefined = {};                                                                                             // 538\nfunction defineDeny(c, options) {                                                                                    // 539\n  if (!alreadyDefined[c._name]) {                                                                                    // 540\n                                                                                                                     // 541\n    var isLocalCollection = (c._connection === null);                                                                // 542\n                                                                                                                     // 543\n    // First define deny functions to extend doc with the results of clean                                           // 544\n    // and autovalues. This must be done with \"transform: null\" or we would be                                       // 545\n    // extending a clone of doc and therefore have no effect.                                                        // 546\n    c.deny({                                                                                                         // 547\n      insert: function(userId, doc) {                                                                                // 548\n        // Referenced doc is cleaned in place                                                                        // 549\n        c.simpleSchema(doc).clean(doc, {                                                                             // 550\n          mutate: true,                                                                                              // 551\n          isModifier: false,                                                                                         // 552\n          // We don't do these here because they are done on the client if desired                                   // 553\n          filter: false,                                                                                             // 554\n          autoConvert: false,                                                                                        // 555\n          removeEmptyStrings: false,                                                                                 // 556\n          trimStrings: false,                                                                                        // 557\n          extendAutoValueContext: {                                                                                  // 558\n            isInsert: true,                                                                                          // 559\n            isUpdate: false,                                                                                         // 560\n            isUpsert: false,                                                                                         // 561\n            userId: userId,                                                                                          // 562\n            isFromTrustedCode: false,                                                                                // 563\n            docId: doc._id,                                                                                          // 564\n            isLocalCollection: isLocalCollection                                                                     // 565\n          }                                                                                                          // 566\n        });                                                                                                          // 567\n                                                                                                                     // 568\n        return false;                                                                                                // 569\n      },                                                                                                             // 570\n      update: function(userId, doc, fields, modifier) {                                                              // 571\n        // Referenced modifier is cleaned in place                                                                   // 572\n        c.simpleSchema(modifier).clean(modifier, {                                                                   // 573\n          mutate: true,                                                                                              // 574\n          isModifier: true,                                                                                          // 575\n          // We don't do these here because they are done on the client if desired                                   // 576\n          filter: false,                                                                                             // 577\n          autoConvert: false,                                                                                        // 578\n          removeEmptyStrings: false,                                                                                 // 579\n          trimStrings: false,                                                                                        // 580\n          extendAutoValueContext: {                                                                                  // 581\n            isInsert: false,                                                                                         // 582\n            isUpdate: true,                                                                                          // 583\n            isUpsert: false,                                                                                         // 584\n            userId: userId,                                                                                          // 585\n            isFromTrustedCode: false,                                                                                // 586\n            docId: doc && doc._id,                                                                                   // 587\n            isLocalCollection: isLocalCollection                                                                     // 588\n          }                                                                                                          // 589\n        });                                                                                                          // 590\n                                                                                                                     // 591\n        return false;                                                                                                // 592\n      },                                                                                                             // 593\n      fetch: ['_id'],                                                                                                // 594\n      transform: null                                                                                                // 595\n    });                                                                                                              // 596\n                                                                                                                     // 597\n    // Second define deny functions to validate again on the server                                                  // 598\n    // for client-initiated inserts and updates. These should be                                                     // 599\n    // called after the clean/autovalue functions since we're adding                                                 // 600\n    // them after. These must *not* have \"transform: null\" if options.transform is true because                      // 601\n    // we need to pass the doc through any transforms to be sure                                                     // 602\n    // that custom types are properly recognized for type validation.                                                // 603\n    c.deny(_.extend({                                                                                                // 604\n      insert: function(userId, doc) {                                                                                // 605\n        // We pass the false options because we will have done them on client if desired                             // 606\n        doValidate.call(                                                                                             // 607\n          c,                                                                                                         // 608\n          \"insert\",                                                                                                  // 609\n          [                                                                                                          // 610\n            doc,                                                                                                     // 611\n            {                                                                                                        // 612\n              trimStrings: false,                                                                                    // 613\n              removeEmptyStrings: false,                                                                             // 614\n              filter: false,                                                                                         // 615\n              autoConvert: false                                                                                     // 616\n            },                                                                                                       // 617\n            function(error) {                                                                                        // 618\n              if (error) {                                                                                           // 619\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                          // 620\n              }                                                                                                      // 621\n            }                                                                                                        // 622\n          ],                                                                                                         // 623\n          false, // getAutoValues                                                                                    // 624\n          userId,                                                                                                    // 625\n          false // isFromTrustedCode                                                                                 // 626\n        );                                                                                                           // 627\n                                                                                                                     // 628\n        return false;                                                                                                // 629\n      },                                                                                                             // 630\n      update: function(userId, doc, fields, modifier) {                                                              // 631\n        // NOTE: This will never be an upsert because client-side upserts                                            // 632\n        // are not allowed once you define allow/deny functions.                                                     // 633\n        // We pass the false options because we will have done them on client if desired                             // 634\n        doValidate.call(                                                                                             // 635\n          c,                                                                                                         // 636\n          \"update\",                                                                                                  // 637\n          [                                                                                                          // 638\n            {_id: doc && doc._id},                                                                                   // 639\n            modifier,                                                                                                // 640\n            {                                                                                                        // 641\n              trimStrings: false,                                                                                    // 642\n              removeEmptyStrings: false,                                                                             // 643\n              filter: false,                                                                                         // 644\n              autoConvert: false                                                                                     // 645\n            },                                                                                                       // 646\n            function(error) {                                                                                        // 647\n              if (error) {                                                                                           // 648\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                          // 649\n              }                                                                                                      // 650\n            }                                                                                                        // 651\n          ],                                                                                                         // 652\n          false, // getAutoValues                                                                                    // 653\n          userId,                                                                                                    // 654\n          false // isFromTrustedCode                                                                                 // 655\n        );                                                                                                           // 656\n                                                                                                                     // 657\n        return false;                                                                                                // 658\n      },                                                                                                             // 659\n      fetch: ['_id']                                                                                                 // 660\n    }, options.transform === true ? {} : {transform: null}));                                                        // 661\n                                                                                                                     // 662\n    // note that we've already done this collection so that we don't do it again                                     // 663\n    // if attachSchema is called again                                                                               // 664\n    alreadyDefined[c._name] = true;                                                                                  // 665\n  }                                                                                                                  // 666\n}                                                                                                                    // 667\n                                                                                                                     // 668\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['aldeed:collection2-core'] = {}, {\n  Collection2: Collection2\n});\n\n})();\n","servePath":"/packages/aldeed_collection2-core.js","sourceMap":{"version":3,"sources":["/packages/aldeed_collection2-core/lib/collection2.js"],"names":[],"mappingsfile":"/packages/aldeed_collection2-core.js","sourcesContent":["// Exported only for listening to events\nCollection2 = new EventEmitter();\n\n// backwards compatibility\nif (typeof Mongo === \"undefined\") {\n  Mongo = {};\n  Mongo.Collection = Meteor.Collection;\n}\n\nvar addValidationErrorsPropName = SimpleSchema.version >= 2 ? 'addValidationErrors' : 'addInvalidKeys';\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  var self = this;\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!(ss instanceof SimpleSchema)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  self._c2 = self._c2 || {};\n\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n  if (self._c2._simpleSchema && options.replace !== true) {\n    if (ss.version >= 2) {\n      var newSS = new SimpleSchema(self._c2._simpleSchema);\n      newSS.extend(ss);\n      ss = newSS;\n    } else {\n      ss = new SimpleSchema([self._c2._simpleSchema, ss]);\n    }\n  }\n\n  var selector = options.selector;\n\n  function attachTo(obj) {\n    if (typeof selector === \"object\") {\n      // Index of existing schema with identical selector\n      var schemaIndex = -1;\n\n      // we need an array to hold multiple schemas\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || [];\n\n      // Loop through existing schemas with selectors\n      obj._c2._simpleSchemas.forEach(function (schema, index) {\n        // if we find a schema with an identical selector, save it's index\n        if(_.isEqual(schema.selector, selector)) {\n          schemaIndex = index;\n        }\n      });\n      if (schemaIndex === -1) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: new SimpleSchema(ss),\n          selector: selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace !== true) {\n          // Merge with existing schema unless options.replace is `true`\n          if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {\n            obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);\n          } else {\n            obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n          }\n        } else {\n          // If options.repalce is `true` replace existing schema with new schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        }\n\n      }\n\n      // Remove existing schemas without selector\n      delete obj._c2._simpleSchema;\n    } else {\n      // Track the schema in the collection\n      obj._c2._simpleSchema = ss;\n\n      // Remove existing schemas with selector\n      delete obj._c2._simpleSchemas;\n    }\n  }\n\n  attachTo(self);\n  // Attach the schema to the underlying LocalCollection, too\n  if (self._collection instanceof LocalCollection) {\n    self._collection._c2 = self._collection._c2 || {};\n    attachTo(self._collection);\n  }\n\n  defineDeny(self, options);\n  keepInsecure(self);\n\n  Collection2.emit('schema.attached', self, ss, options);\n};\n\n_.each([Mongo.Collection, LocalCollection], function (obj) {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in `self`, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    var schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');\n\n      var schema, selector, target;\n      for (var i = 0; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n_.each(['insert', 'update'], function(methodName) {\n  var _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function() {\n    var self = this, options,\n        args = _.toArray(arguments);\n\n    options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (self._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate.call(\n        self,\n        methodName,\n        args,\n        true, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? self._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(self, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {\n  var self = this, doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  var schema = self.simpleSchema(doc, options, selector);\n  var isLocalCollection = (self._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Determine validation context\n  var validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = self._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  var docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  var cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {\n    // Clean the doc/modifier in place\n    schema.clean(docToClean, {\n      mutate: true,\n      filter: filter,\n      autoConvert: autoConvert,\n      getAutoValues: getAutoValues,\n      isModifier: (type !== \"insert\"),\n      removeEmptyStrings: removeEmptyStrings,\n      trimStrings: trimStrings,\n      extendAutoValueContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendAutoValueContext || {})\n    });\n  }\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  doClean(\n    doc,\n    getAutoValues,\n    options.filter !== false,\n    options.autoConvert !== false,\n    options.removeEmptyStrings !== false,\n    options.trimStrings !== false\n  );\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  var docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (doc.hasOwnProperty(prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier. This is no doubt prone to errors, but there\n  // probably isn't any better way right now.\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {\n    var set = docToValidate.$set || {};\n    docToValidate.$set = _.clone(selector);\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    _.extend(docToValidate.$set, set);\n  }\n\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    doClean(docToValidate, true, false, false, false, false);\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  var isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  var message;\n  var invalidKeys = SimpleSchema.version >= 2 ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    message = context.keyErrorMessage(invalidKeys[0].name);\n  } else {\n    message = \"Failed validation\";\n  }\n  var error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {\n    var args = _.toArray(arguments);\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingServerErrors(error) {\n    var args = _.toArray(arguments);\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nvar alreadyInsecured = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecured[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nvar alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    var isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and autovalues. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/autovalue functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny(_.extend({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {transform: null}));\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n"]}}]